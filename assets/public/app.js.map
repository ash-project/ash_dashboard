{"version":3,"sources":["test/metrics_live_test.js"],"names":[],"mappingslSA;AAAA","file":"public/app.js","sourcesContent":["// Initialize the uPlot mocks\nconst mockDelSeries = jest.fn()\nconst mockAddSeries = jest.fn()\nconst mockSetData = jest.fn()\n\njest.mock('uplot', () => {\n  return {\n    __esModule: true,\n    default: jest.fn(() => {\n      return {\n        series: [],\n        addSeries: mockAddSeries,\n        delSeries: mockDelSeries,\n        setData: mockSetData\n      }\n    })\n  }\n})\n\nimport { TelemetryChart, newSeriesConfig } from '../js/metrics_live'\nimport uPlot from 'uplot'\n\nbeforeEach(() => {\n  // Clear all instances and calls to constructor and all methods:\n  uPlot.mockClear()\n  mockDelSeries.mockClear()\n  mockSetData.mockClear()\n})\n\ndescribe('TelemetryChart', () => {\n  test('instantiates uPlot', () => {\n    const chart = new TelemetryChart(document.body, { metric: 'counter', tagged: false })\n\n    expect(uPlot).toHaveBeenCalledTimes(1)\n  })\n\n  test('raises without metric', () => {\n    expect(() => {\n      new TelemetryChart(document.body, {})\n    }).toThrowError(new TypeError(`No metric type was provided`))\n  })\n\n  test('raises if metric is invalid', () => {\n    expect(() => {\n      new TelemetryChart(document.body, { metric: 'invalid' })\n    }).toThrowError(new TypeError(`No metric defined for type invalid`))\n  })\n})\n\ndescribe('Metrics no tags', () => {\n  test('Counter', () => {\n    const chart = new TelemetryChart(document.body, { metric: 'counter', tagged: false })\n\n    chart.pushData([{ x: 'a', y: 2, z: 1 }])\n\n    expect(mockSetData).toHaveBeenCalledWith([\n      [1],\n      [1]\n    ])\n\n    chart.pushData([{ x: 'b', y: 4, z: 3 }])\n\n    expect(mockSetData).toHaveBeenCalledWith([\n      [1, 3],\n      [1, 2]\n    ])\n\n    chart.pushData([\n      { x: 'c', y: 6, z: 5 },\n      { x: 'd', y: 8, z: 7 }\n    ])\n\n    expect(mockSetData).toHaveBeenCalledWith([\n      [1, 3, 5, 7],\n      [1, 2, 3, 4]\n    ])\n  })\n\n  test('LastValue', () => {\n    const chart = new TelemetryChart(document.body, { metric: 'last_value', tagged: false })\n\n    chart.pushData([{ x: 'a', y: 2, z: 1 }])\n\n    expect(mockSetData).toHaveBeenCalledWith([\n      [1],\n      [2]\n    ])\n\n    chart.pushData([{ x: 'b', y: 4, z: 3 }])\n\n    expect(mockSetData).toHaveBeenCalledWith([\n      [1, 3],\n      [2, 4]\n    ])\n\n    chart.pushData([\n      { x: 'c', y: 6, z: 5 },\n      { x: 'd', y: 8, z: 7 }\n    ])\n\n    expect(mockSetData).toHaveBeenCalledWith([\n      [1, 3, 5, 7],\n      [2, 4, 6, 8]\n    ])\n  })\n\n  test('Sum', () => {\n    const chart = new TelemetryChart(document.body, { metric: 'sum', tagged: false })\n\n    chart.pushData([{ x: 'a', y: 2, z: 1 }])\n\n    expect(mockSetData).toHaveBeenCalledWith([\n      [1],\n      [2]\n    ])\n\n    chart.pushData([{ x: 'b', y: 4, z: 3 }])\n\n    expect(mockSetData).toHaveBeenCalledWith([\n      [1, 3],\n      [2, 6]\n    ])\n\n    chart.pushData([\n      { x: 'c', y: 6, z: 5 },\n      { x: 'd', y: 8, z: 7 }\n    ])\n\n    expect(mockSetData).toHaveBeenCalledWith([\n      [1, 3, 5, 7],\n      [2, 6, 12, 20]\n    ])\n  })\n\n  describe('Summary', () => {\n    test('initializes the chart', () => {\n      const chart = new TelemetryChart(document.body, { metric: 'summary', tagged: true })\n      expect(mockDelSeries).toHaveBeenCalledTimes(0)\n    })\n\n    test('pushes value/min/max/avg', () => {\n      const chart = new TelemetryChart(document.body, { metric: 'summary', tagged: true })\n      chart.pushData([{ x: 'a', y: 2, z: 1 }])\n\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1],\n        [2],\n        [2],\n        [2],\n        [2]\n      ])\n\n      chart.pushData([{ x: 'b', y: 4, z: 3 }])\n\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1, 3],\n        [2, 4],\n        [2, 2],\n        [2, 4],\n        [2, 3]\n      ])\n\n      chart.pushData([\n        { x: 'c', y: 6, z: 5 },\n        { x: 'd', y: 8, z: 7 }\n      ])\n\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1, 3, 5, 7],\n        [2, 4, 6, 8],\n        [2, 2, 2, 2],\n        [2, 4, 6, 8],\n        [2, 3, 4, 5]\n      ])\n    })\n  })\n})\n\ndescribe('Metrics with tags', () => {\n  describe('LastValue', () => {\n    test('deletes initial dataset', () => {\n      const chart = new TelemetryChart(document.body, { metric: 'last_value', tagged: true })\n      expect(mockDelSeries).toHaveBeenCalledWith(1)\n    })\n\n    test('aligns data by tag', () => {\n      const chart = new TelemetryChart(document.body, { metric: 'last_value', tagged: true })\n\n      chart.pushData([{ x: 'a', y: 2, z: 1 }])\n      expect(mockAddSeries).toHaveBeenCalledWith(newSeriesConfig({ label: 'a' }, 0), 1)\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1],\n        [2]\n      ])\n\n      chart.pushData([{ x: 'b', y: 4, z: 3 }])\n      expect(mockAddSeries).toHaveBeenCalledWith(newSeriesConfig({ label: 'b' }, 1), 2)\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1, 3],\n        [2, null],\n        [null, 4]\n      ])\n\n      chart.pushData([\n        { x: 'b', y: 6, z: 5 },\n        { x: 'a', y: 8, z: 7 }\n      ])\n\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1, 3, 5, 7],\n        [2, null, null, 8],\n        [null, 4, 6, null]\n      ])\n    })\n  })\n\n  describe('Counter', () => {\n    test('deletes initial dataset', () => {\n      const chart = new TelemetryChart(document.body, { metric: 'counter', tagged: true })\n      expect(mockDelSeries).toHaveBeenCalledWith(1)\n    })\n\n    test('aligns data by tag', () => {\n      const chart = new TelemetryChart(document.body, { metric: 'counter', tagged: true })\n\n      chart.pushData([{ x: 'a', y: 2, z: 1 }])\n      expect(mockAddSeries).toHaveBeenCalledWith(newSeriesConfig({ label: 'a' }, 0), 1)\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1],\n        [1]\n      ])\n\n      chart.pushData([{ x: 'b', y: 4, z: 3 }])\n      expect(mockAddSeries).toHaveBeenCalledWith(newSeriesConfig({ label: 'b' }, 1), 2)\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1, 3],\n        [1, null],\n        [null, 1]\n      ])\n\n      chart.pushData([\n        { x: 'b', y: 6, z: 5 },\n        { x: 'a', y: 8, z: 7 }\n      ])\n\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1, 3, 5, 7],\n        [1, null, null, 2],\n        [null, 1, 2, null]\n      ])\n    })\n  })\n\n  describe('Sum', () => {\n    test('deletes initial dataset', () => {\n      const chart = new TelemetryChart(document.body, { metric: 'sum', tagged: true })\n      expect(mockDelSeries).toHaveBeenCalledWith(1)\n    })\n\n    test('aligns data by tag', () => {\n      const chart = new TelemetryChart(document.body, { metric: 'sum', tagged: true })\n\n      chart.pushData([{ x: 'a', y: 2, z: 1 }])\n      expect(mockAddSeries).toHaveBeenCalledWith(newSeriesConfig({ label: 'a' }, 0), 1)\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1],\n        [2]\n      ])\n\n      chart.pushData([{ x: 'b', y: 4, z: 3 }])\n      expect(mockAddSeries).toHaveBeenCalledWith(newSeriesConfig({ label: 'b' }, 1), 2)\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1, 3],\n        [2, null],\n        [null, 4]\n      ])\n\n      chart.pushData([\n        { x: 'b', y: 6, z: 5 },\n        { x: 'a', y: 8, z: 7 }\n      ])\n\n      expect(mockSetData).toHaveBeenCalledWith([\n        [1, 3, 5, 7],\n        [2, null, null, 10],\n        [null, 4, 10, null]\n      ])\n    })\n  })\n})\n"]}